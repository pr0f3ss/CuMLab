<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="module_8hpp" kind="file" language="C++">
    <compoundname>module.hpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">vector</includes>
    <includedby refid="module_8cpp" local="yes">src/module.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/CuMLab/module.hpp</label>
        <link refid="module_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="3">
        <label>memory</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="5">
        <label>unordered_map</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>include/CuMLab/module.hpp</label>
        <link refid="module_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/module.cpp</label>
        <link refid="module_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classModule" prot="public">Module</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>CUMLAB_MODULE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CUMLAB_MODULE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTensor" kindref="compound">Tensor</ref>;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="classModule" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classModule" kindref="compound">Module</ref><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="14" refid="classModule_1a45b1881e302e94f0270a6680a5e73b44" refkind="member"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;std::string,<sp/>std::shared_ptr&lt;Tensor&gt;&gt;<sp/><ref refid="classModule_1a45b1881e302e94f0270a6680a5e73b44" kindref="member">parameters_</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="17" refid="classModule_1ac0b59ad515f7ddd34618dc5141a0aab0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classModule_1ac0b59ad515f7ddd34618dc5141a0aab0" kindref="member">Module</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18" refid="classModule_1a4a48538d35a2da7fcc32d9f509034723" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classModule_1a4a48538d35a2da7fcc32d9f509034723" kindref="member">~Module</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>a<sp/>parameter<sp/>(e.g.,<sp/>weights,<sp/>biases)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="classModule_1ab02960cc56229ed98f9e9c7ca128ad7e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classModule_1ab02960cc56229ed98f9e9c7ca128ad7e" kindref="member">register_parameter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Tensor&gt;<sp/>param)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classModule_1a45b1881e302e94f0270a6680a5e73b44" kindref="member">parameters_</ref>[name]<sp/>=<sp/>param;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>all<sp/>parameters<sp/>(for<sp/>optimization)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="classModule_1a9b8efa949128d66c255d1093ec339dc2" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Tensor&gt;&gt;<sp/><ref refid="classModule_1a9b8efa949128d66c255d1093ec339dc2" kindref="member">parameters</ref>()<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Tensor&gt;&gt;<sp/>params;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[name,<sp/>param]<sp/>:<sp/><ref refid="classModule_1a45b1881e302e94f0270a6680a5e73b44" kindref="member">parameters_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>params.push_back(param);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>params;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Forward<sp/>pass<sp/>function<sp/>(must<sp/>be<sp/>overridden)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Tensor&gt;</highlight></codeline>
<codeline lineno="37" refid="classModule_1aaebafabffcff625284e13fc5c212901d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classModule_1aaebafabffcff625284e13fc5c212901d" kindref="member">forward</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Tensor&gt;<sp/>&amp;input)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="classModule_1a91df90cb07d2a4e52336f3bb7040b52c" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Tensor&gt;<sp/><ref refid="classModule_1a91df90cb07d2a4e52336f3bb7040b52c" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Tensor&gt;<sp/>&amp;input)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classModule_1aaebafabffcff625284e13fc5c212901d" kindref="member">forward</ref>(input);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>model<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="classModule_1ad237415384ab334229b2d0abf9bbb0bf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classModule_1ad237415384ab334229b2d0abf9bbb0bf" kindref="member">save</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Saving<sp/>model<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>filename<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Serialization<sp/>logic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>model<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="classModule_1abdba7b9fec5b9da2fcac7333da3f573d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classModule_1abdba7b9fec5b9da2fcac7333da3f573d" kindref="member">load</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Loading<sp/>model<sp/>from<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>filename<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Deserialization<sp/>logic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal">};</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CUMLAB_MODULE_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/CuMLab/module.hpp"/>
  </compounddef>
</doxygen>
