<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classCuMLab_1_1Tensor" kind="class" language="C++" prot="public">
    <compoundname>CuMLab::Tensor</compoundname>
    <includes refid="tensor_8hpp" local="no">tensor.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classCuMLab_1_1Tensor_1a8091f3d8ba06e8604ed9fd8c903e55c5" prot="private" static="no" mutable="no">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; CuMLab::Tensor&lt; T &gt;::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <qualifiedname>CuMLab::Tensor::data_</qualifiedname>
        <briefdescription>
<para>Flat storage for tensor values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CuMLab/core/tensor.hpp" line="20" column="15" bodyfile="include/CuMLab/core/tensor.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCuMLab_1_1Tensor_1ab691dc26d63f6aeb77105ac69ccdbed8" prot="private" static="no" mutable="no">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; CuMLab::Tensor&lt; T &gt;::shape_</definition>
        <argsstring></argsstring>
        <name>shape_</name>
        <qualifiedname>CuMLab::Tensor::shape_</qualifiedname>
        <briefdescription>
<para>Shape of the tensor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CuMLab/core/tensor.hpp" line="21" column="15" bodyfile="include/CuMLab/core/tensor.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCuMLab_1_1Tensor_1aa7a0ef79df3a8cbc7fa6a5df2a79cb6b" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CuMLab::Tensor&lt; T &gt;::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <qualifiedname>CuMLab::Tensor::size_</qualifiedname>
        <briefdescription>
<para>Total number of elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CuMLab/core/tensor.hpp" line="22" column="7" bodyfile="include/CuMLab/core/tensor.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classCuMLab_1_1Tensor_1a64b4ff6824f753a289e1a6fb0f1ad328" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>CuMLab::Tensor&lt; T &gt;::Tensor</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;shape)</argsstring>
        <name>Tensor</name>
        <qualifiedname>CuMLab::Tensor::Tensor</qualifiedname>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>Constructs a <ref refid="classCuMLab_1_1Tensor" kindref="compound">Tensor</ref> with the given shape, initializing all elements to zero. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The shape of the tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CuMLab/core/tensor.hpp" line="30" column="12" bodyfile="src/tensor.cpp" bodystart="9" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="classCuMLab_1_1Tensor_1a32a42bead992fe392140d945e15eb4a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt; int &gt; CuMLab::Tensor&lt; T &gt;::shape</definition>
        <argsstring>() const</argsstring>
        <name>shape</name>
        <qualifiedname>CuMLab::Tensor::shape</qualifiedname>
        <briefdescription>
<para>Returns the shape of the tensor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A vector representing the shape. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CuMLab/core/tensor.hpp" line="36" column="15" bodyfile="src/tensor.cpp" bodystart="19" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classCuMLab_1_1Tensor_1a68f64458b824c3ad64440eee674befa3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CuMLab::Tensor&lt; T &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>CuMLab::Tensor::size</qualifiedname>
        <briefdescription>
<para>Returns the total number of elements in the tensor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The total number of elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CuMLab/core/tensor.hpp" line="42" column="7" bodyfile="src/tensor.cpp" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classCuMLab_1_1Tensor_1acfa9f74d63898d345d2f6f8fc4d5f5fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; CuMLab::Tensor&lt; T &gt;::operator()</definition>
        <argsstring>(std::initializer_list&lt; int &gt; indices)</argsstring>
        <name>operator()</name>
        <qualifiedname>CuMLab::Tensor::operator()</qualifiedname>
        <param>
          <type>std::initializer_list&lt; int &gt;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
<para>Access or modify an element in the tensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>The indices of the element to access. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the requested tensor element. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If indices are out of bounds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CuMLab/core/tensor.hpp" line="50" column="5" bodyfile="src/tensor.cpp" bodystart="29" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classCuMLab_1_1Tensor_1acfb0cb146ee2992ffdf9260dafe67d4a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T CuMLab::Tensor&lt; T &gt;::operator()</definition>
        <argsstring>(std::initializer_list&lt; int &gt; indices) const</argsstring>
        <name>operator()</name>
        <qualifiedname>CuMLab::Tensor::operator()</qualifiedname>
        <param>
          <type>std::initializer_list&lt; int &gt;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
<para>Access an element in the tensor (read-only). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>The indices of the element to retrieve. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the requested tensor element. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If indices are out of bounds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CuMLab/core/tensor.hpp" line="58" column="5" bodyfile="src/tensor.cpp" bodystart="58" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classCuMLab_1_1Tensor_1a68c8421a9c1da9c736102ce1a51d94a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCuMLab_1_1Tensor" kindref="compound">Tensor</ref>&lt; T &gt;</type>
        <definition>Tensor&lt; T &gt; CuMLab::Tensor&lt; T &gt;::operator+</definition>
        <argsstring>(const Tensor&lt; T &gt; &amp;other) const</argsstring>
        <name>operator+</name>
        <qualifiedname>CuMLab::Tensor::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classCuMLab_1_1Tensor" kindref="compound">Tensor</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Performs element-wise addition with another tensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The tensor to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new tensor containing the sum of corresponding elements. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If tensor shapes do not match. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CuMLab/core/tensor.hpp" line="70" column="10" bodyfile="src/tensor.cpp" bodystart="90" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classCuMLab_1_1Tensor_1a1539620a590d85420321cf6049f900d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCuMLab_1_1Tensor" kindref="compound">Tensor</ref>&lt; T &gt;</type>
        <definition>Tensor&lt; T &gt; CuMLab::Tensor&lt; T &gt;::operator-</definition>
        <argsstring>(const Tensor&lt; T &gt; &amp;other) const</argsstring>
        <name>operator-</name>
        <qualifiedname>CuMLab::Tensor::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classCuMLab_1_1Tensor" kindref="compound">Tensor</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Performs element-wise subtraction with another tensor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CuMLab/core/tensor.hpp" line="75" column="10" bodyfile="src/tensor.cpp" bodystart="118" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classCuMLab_1_1Tensor_1ad56e6e95700973037f344edae4a1d07d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCuMLab_1_1Tensor" kindref="compound">Tensor</ref>&lt; T &gt;</type>
        <definition>Tensor&lt; T &gt; CuMLab::Tensor&lt; T &gt;::operator*</definition>
        <argsstring>(const Tensor&lt; T &gt; &amp;other) const</argsstring>
        <name>operator*</name>
        <qualifiedname>CuMLab::Tensor::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classCuMLab_1_1Tensor" kindref="compound">Tensor</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Performs element-wise multiplication (Hadamard product) with another tensor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CuMLab/core/tensor.hpp" line="81" column="10" bodyfile="src/tensor.cpp" bodystart="147" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classCuMLab_1_1Tensor_1aed7ac62ba0ef3e56ec78df23a5b7a9e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCuMLab_1_1Tensor" kindref="compound">Tensor</ref>&lt; T &gt;</type>
        <definition>Tensor&lt; T &gt; CuMLab::Tensor&lt; T &gt;::operator/</definition>
        <argsstring>(const Tensor&lt; T &gt; &amp;other) const</argsstring>
        <name>operator/</name>
        <qualifiedname>CuMLab::Tensor::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classCuMLab_1_1Tensor" kindref="compound">Tensor</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Performs element-wise division with another tensor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CuMLab/core/tensor.hpp" line="86" column="10" bodyfile="src/tensor.cpp" bodystart="175" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classCuMLab_1_1Tensor_1a04b03f9d776f73269b7568cc6422e77b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCuMLab_1_1Tensor" kindref="compound">Tensor</ref>&lt; T &gt;</type>
        <definition>Tensor&lt; T &gt; CuMLab::Tensor&lt; T &gt;::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <qualifiedname>CuMLab::Tensor::operator-</qualifiedname>
        <briefdescription>
<para>Returns a tensor with all elements negated (unary <computeroutput>-</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CuMLab/core/tensor.hpp" line="91" column="10" bodyfile="src/tensor.cpp" bodystart="188" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classCuMLab_1_1Tensor_1a82a7d2af93a8d0bb0506b71e3dd76475" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCuMLab_1_1Tensor" kindref="compound">Tensor</ref>&lt; T &gt;</type>
        <definition>Tensor&lt; T &gt; CuMLab::Tensor&lt; T &gt;::operator*</definition>
        <argsstring>(T scalar) const</argsstring>
        <name>operator*</name>
        <qualifiedname>CuMLab::Tensor::operator*</qualifiedname>
        <param>
          <type>T</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>Multiplies each element of the tensor by a scalar value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CuMLab/core/tensor.hpp" line="96" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classCuMLab_1_1Tensor_1a7a9d4c05fae4852aaac1ec2eb3b32851" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T CuMLab::Tensor&lt; T &gt;::sum</definition>
        <argsstring>() const</argsstring>
        <name>sum</name>
        <qualifiedname>CuMLab::Tensor::sum</qualifiedname>
        <briefdescription>
<para>Computes the sum of all elements in the tensor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CuMLab/core/tensor.hpp" line="105" column="5" bodyfile="src/tensor.cpp" bodystart="199" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classCuMLab_1_1Tensor_1a15bcc7a804159e68ad9e3b9ad694ab69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T CuMLab::Tensor&lt; T &gt;::mean</definition>
        <argsstring>() const</argsstring>
        <name>mean</name>
        <qualifiedname>CuMLab::Tensor::mean</qualifiedname>
        <briefdescription>
<para>Computes the mean (average) of all elements in the tensor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CuMLab/core/tensor.hpp" line="110" column="5" bodyfile="src/tensor.cpp" bodystart="206" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classCuMLab_1_1Tensor_1af0556e445f0c4fdb8f7e3fa6ae94b40f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T CuMLab::Tensor&lt; T &gt;::max</definition>
        <argsstring>() const</argsstring>
        <name>max</name>
        <qualifiedname>CuMLab::Tensor::max</qualifiedname>
        <briefdescription>
<para>Finds the maximum value in the tensor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CuMLab/core/tensor.hpp" line="115" column="5" bodyfile="src/tensor.cpp" bodystart="212" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classCuMLab_1_1Tensor_1a84e6ba8101089446f191e702356b0be3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T CuMLab::Tensor&lt; T &gt;::min</definition>
        <argsstring>() const</argsstring>
        <name>min</name>
        <qualifiedname>CuMLab::Tensor::min</qualifiedname>
        <briefdescription>
<para>Finds the minimum value in the tensor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CuMLab/core/tensor.hpp" line="120" column="5" bodyfile="src/tensor.cpp" bodystart="218" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classCuMLab_1_1Tensor_1aecddf7562700d395e011055be2d74176" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CuMLab::Tensor&lt; T &gt;::print</definition>
        <argsstring>() const</argsstring>
        <name>print</name>
        <qualifiedname>CuMLab::Tensor::print</qualifiedname>
        <briefdescription>
<para>Prints the tensor&apos;s shape and elements to the console. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CuMLab/core/tensor.hpp" line="125" column="8" bodyfile="src/tensor.cpp" bodystart="227" bodyend="244"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A multi-dimensional tensor class supporting generic data types. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The data type of the tensor elements (e.g., <computeroutput>float</computeroutput>, <computeroutput>int</computeroutput>, <computeroutput>uint8_t</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="include/CuMLab/core/tensor.hpp" line="18" column="12" bodyfile="include/CuMLab/core/tensor.hpp" bodystart="18" bodyend="126"/>
    <listofallmembers>
      <member refid="classCuMLab_1_1Tensor_1a8091f3d8ba06e8604ed9fd8c903e55c5" prot="private" virt="non-virtual"><scope>CuMLab::Tensor</scope><name>data_</name></member>
      <member refid="classCuMLab_1_1Tensor_1af0556e445f0c4fdb8f7e3fa6ae94b40f" prot="public" virt="non-virtual"><scope>CuMLab::Tensor</scope><name>max</name></member>
      <member refid="classCuMLab_1_1Tensor_1a15bcc7a804159e68ad9e3b9ad694ab69" prot="public" virt="non-virtual"><scope>CuMLab::Tensor</scope><name>mean</name></member>
      <member refid="classCuMLab_1_1Tensor_1a84e6ba8101089446f191e702356b0be3" prot="public" virt="non-virtual"><scope>CuMLab::Tensor</scope><name>min</name></member>
      <member refid="classCuMLab_1_1Tensor_1acfa9f74d63898d345d2f6f8fc4d5f5fe" prot="public" virt="non-virtual"><scope>CuMLab::Tensor</scope><name>operator()</name></member>
      <member refid="classCuMLab_1_1Tensor_1acfb0cb146ee2992ffdf9260dafe67d4a" prot="public" virt="non-virtual"><scope>CuMLab::Tensor</scope><name>operator()</name></member>
      <member refid="classCuMLab_1_1Tensor_1ad56e6e95700973037f344edae4a1d07d" prot="public" virt="non-virtual"><scope>CuMLab::Tensor</scope><name>operator*</name></member>
      <member refid="classCuMLab_1_1Tensor_1a82a7d2af93a8d0bb0506b71e3dd76475" prot="public" virt="non-virtual"><scope>CuMLab::Tensor</scope><name>operator*</name></member>
      <member refid="classCuMLab_1_1Tensor_1a68c8421a9c1da9c736102ce1a51d94a8" prot="public" virt="non-virtual"><scope>CuMLab::Tensor</scope><name>operator+</name></member>
      <member refid="classCuMLab_1_1Tensor_1a1539620a590d85420321cf6049f900d7" prot="public" virt="non-virtual"><scope>CuMLab::Tensor</scope><name>operator-</name></member>
      <member refid="classCuMLab_1_1Tensor_1a04b03f9d776f73269b7568cc6422e77b" prot="public" virt="non-virtual"><scope>CuMLab::Tensor</scope><name>operator-</name></member>
      <member refid="classCuMLab_1_1Tensor_1aed7ac62ba0ef3e56ec78df23a5b7a9e1" prot="public" virt="non-virtual"><scope>CuMLab::Tensor</scope><name>operator/</name></member>
      <member refid="classCuMLab_1_1Tensor_1aecddf7562700d395e011055be2d74176" prot="public" virt="non-virtual"><scope>CuMLab::Tensor</scope><name>print</name></member>
      <member refid="classCuMLab_1_1Tensor_1a32a42bead992fe392140d945e15eb4a9" prot="public" virt="non-virtual"><scope>CuMLab::Tensor</scope><name>shape</name></member>
      <member refid="classCuMLab_1_1Tensor_1ab691dc26d63f6aeb77105ac69ccdbed8" prot="private" virt="non-virtual"><scope>CuMLab::Tensor</scope><name>shape_</name></member>
      <member refid="classCuMLab_1_1Tensor_1a68f64458b824c3ad64440eee674befa3" prot="public" virt="non-virtual"><scope>CuMLab::Tensor</scope><name>size</name></member>
      <member refid="classCuMLab_1_1Tensor_1aa7a0ef79df3a8cbc7fa6a5df2a79cb6b" prot="private" virt="non-virtual"><scope>CuMLab::Tensor</scope><name>size_</name></member>
      <member refid="classCuMLab_1_1Tensor_1a7a9d4c05fae4852aaac1ec2eb3b32851" prot="public" virt="non-virtual"><scope>CuMLab::Tensor</scope><name>sum</name></member>
      <member refid="classCuMLab_1_1Tensor_1a64b4ff6824f753a289e1a6fb0f1ad328" prot="public" virt="non-virtual"><scope>CuMLab::Tensor</scope><name>Tensor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
